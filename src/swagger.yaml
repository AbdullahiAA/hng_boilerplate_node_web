openapi: 3.0.3
info:
  title: HNG Stage 3 Task
  description: An extended API for user management, roles, and permissions
  version: 1.0.0
servers:
  - url: http://localhost:5050/api/v1
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        age:
          type: integer
    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    Permission:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    AuthResponse:
      type: object
      properties:
        token:
          type: string
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
    OTPRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        phoneNumber:
          type: string
    OTPVerifyRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        otp:
          type: string
    OTPResponse:
      type: object
      properties:
        message:
          type: string
          example: OTP sent successfully
        otpId:
          type: string
    OTPVerifyResponse:
      type: object
      properties:
        message:
          type: string
          example: OTP verified successfully

# securitySchemes:
#   bearerAuth:
#     type: http
#     scheme: bearer
#     bearerFormat: JWT

paths:
  /health:
    get:
      tags:
        - Healthcheck
      summary: Check the health status of the API
      responses:
        "200":
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  uptime:
                    type: number
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  username:
                    type: string
                  email:
                    type: string
                    format: email
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate a user and return a JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Log out a user (blacklist the JWT from the login endpoint)
      # security:
      #   - bearerAuth: []
      responses:
        "204":
          description: User logged out successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Initiate the password reset process
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Password reset link sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset link sent to your email
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset the user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                newPassword:
                  type: string
                  format: password
      responses:
        "200":
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /otp/generate:
    post:
      tags:
        - Authentication
      summary: Generate an OTP for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OTPRequest"
      responses:
        "200":
          description: OTP generated and sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTPResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /otp/verify:
    post:
      tags:
        - Authentication
      summary: Verify the OTP provided by the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OTPVerifyRequest"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OTPVerifyResponse"
        "400":
          description: Bad request or invalid OTP
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/me:
    get:
      tags:
        - Authentication
      summary: Retrieve the authenticated user's profile
      # security:
      #   - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  username:
                    type: string
                  email:
                    type: string
                    format: email
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Authentication
      summary: Update the authenticated user's profile
      # security:
      #   - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  username:
                    type: string
                  email:
                    type: string
                    format: email
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users:
    get:
      tags:
        - Users
      summary: Retrieve a list of all users
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /users/{id}:
    get:
      tags:
        - Users
      summary: Retrieve details of a specific user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      tags:
        - Users
      summary: Delete a specific user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User deleted successfully
  /roles:
    post:
      tags:
        - Roles
      summary: Create a new role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        "201":
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    get:
      tags:
        - Roles
      summary: Retrieve a list of all roles
      responses:
        "200":
          description: A list of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /roles/{id}:
    put:
      tags:
        - Roles
      summary: Update a specific role by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        "200":
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    delete:
      tags:
        - Roles
      summary: Delete a specific role by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Role deleted successfully
  /permissions:
    post:
      tags:
        - Permissions
      summary: Create a new permission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Permission"
      responses:
        "201":
          description: Permission created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permission"
    get:
      tags:
        - Permissions
      summary: Retrieve a list of all permissions
      responses:
        "200":
          description: A list of permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
  /permissions/{id}:
    put:
      tags:
        - Permissions
      summary: Update a specific permission by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Permission"
      responses:
        "200":
          description: Permission updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permission"
    delete:
      tags:
        - Permissions
      summary: Delete a specific permission by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Permission deleted successfully
  /roles/{roleId}/permissions:
    post:
      tags:
        - Permissions
      summary: Assign permissions to a role
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
      responses:
        "200":
          description: Permissions assigned to role successfully
  /admin/dashboard:
    get:
      tags:
        - Admin
      summary: Retrieve admin dashboard data
      responses:
        "200":
          description: Admin dashboard data
          content:
            application/json:
              schema:
                type: object
                properties:
                  userCount:
                    type: integer
                  activeUsers:
                    type: integer
                  roles:
                    type: integer
  /admin/logs:
    get:
      tags:
        - Admin
      summary: Retrieve system logs
      responses:
        "200":
          description: System logs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                    message:
                      type: string
                    level:
                      type: string
  /stats:
    get:
      summary: Retrieve application statistics
      responses:
        "200":
          description: Application statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                  activeUsers:
                    type: integer
                  totalRoles:
                    type: integer
                  totalPermissions:
                    type: integer
